package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"aeon-grpc/graph/model"
	"aeon-grpc/grpc"
	"context"
	"fmt"
	"math"
	"math/rand"
)

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, book model.BookInput) (*model.Book, error) {
	var nb model.Book

	newBook := grpc.Book{
		Id:      int32(rand.Intn(math.MaxInt32)),
		Title:   *book.Title,
		Author:  *book.Author,
		Summary: *book.Summary,
		Isbn:    *book.Isbn,
	}
	res, err := r.GqlClient.CreateBook(ctx, &newBook)
	if err != nil {
		return &nb, fmt.Errorf("error creating new book: %v", err)
	}
	nb.Author = res.Author
	nb.Title = res.Title
	nb.Isbn = res.Isbn
	nb.Summary = res.Summary
	nb.ID = string(res.Id)

	return &nb, nil
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, book model.BookInput) (*model.Book, error) {
	var nb model.Book

	newBook := grpc.Book{
		Title:   *book.Title,
		Author:  *book.Author,
		Summary: *book.Summary,
		Isbn:    *book.Isbn,
	}
	res, err := r.GqlClient.UpdateBook(ctx, &newBook)
	if err != nil {
		return &nb, fmt.Errorf("error creating new book: %v", err)
	}
	nb.Author = res.Author
	nb.Title = res.Title
	nb.Isbn = res.Isbn
	nb.Summary = res.Summary
	nb.ID = string(res.Id)

	return &nb, nil
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, book model.BookInput) (bool, error) {
	key := *book.Isbn
	deleteBookRequest := grpc.DeleteBookRequest{
		Id: key,
	}
	res, err := r.GqlClient.DeleteBook(ctx, &deleteBookRequest)
	if err != nil {
		return false, fmt.Errorf("error deleting book; %v", err)
	}

	return res.Deleted, nil
}

// GetBook is the resolver for the getBook field.
func (r *queryResolver) GetBook(ctx context.Context, id string) (*model.Book, error) {
	getBookRequest := grpc.GetBookRequest{
		Id: id,
	}
	res, err := r.GqlClient.GetBook(ctx, &getBookRequest)
	if err != nil {
		return &model.Book{}, fmt.Errorf("error getting book: %v", err)
	}

	book := model.Book{
		ID:      string(res.Id),
		Author:  res.Author,
		Summary: res.Summary,
		Title:   res.Title,
		Isbn:    res.Isbn,
	}

	return &book, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
