package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"aeon-grpc/graph/model"
	"context"
	"fmt"
)

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, book model.BookInput) (*model.Book, error) {
	newBook := model.Book{
		ID:      *book.Isbn,
		Title:   *book.Title,
		Author:  *book.Author,
		Summary: *book.Summary,
		Isbn:    *book.Isbn,
	}
	newBook, err := r.Resolver.Store.CreateItem(newBook)
	if err != nil {
		return &newBook, fmt.Errorf("error creating new book: %v", err)
	}

	return &newBook, nil
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, book model.BookInput) (*model.Book, error) {

	newBook := model.Book{
		ID:      *book.Isbn,
		Title:   *book.Title,
		Author:  *book.Author,
		Summary: *book.Summary,
		Isbn:    *book.Isbn,
	}
	newBook, err := r.Store.UpdateItem(*book.Isbn, newBook)
	if err != nil {
		return &newBook, fmt.Errorf("error creating new book: %v", err)
	}

	return &newBook, nil
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, book model.BookInput) (bool, error) {
	key := *book.Isbn
	err := r.Store.DeleteItem(key)
	if err != nil {
		return false, fmt.Errorf("error deleting book; %v", err)
	}

	return true, nil
}

// GetBook is the resolver for the getBook field.
func (r *queryResolver) GetBook(ctx context.Context, id string) (*model.Book, error) {
	res, err := r.Store.GetItem(id)
	if err != nil {
		return &model.Book{}, fmt.Errorf("error getting book: %v", err)
	}

	return &res, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
